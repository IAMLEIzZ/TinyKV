syntax = "proto3";
package eraftpb;

enum EntryType {
    EntryNormal = 0;
    EntryConfChange = 1;
}

// The entry is a type of change that needs to be applied. It contains two data fields.
// While the fields are built into the model; their usage is determined by the entry_type.
//
// For normal entries, the data field should contain the data change that should be applied.
// The context field can be used for any contextual data that might be relevant to the
// application of the data.
//
// For configuration changes, the data will contain the ConfChange message and the
// context will provide anything needed to assist the configuration change. The context
// is for the user to set and use in this case.
message Entry {
    EntryType entry_type = 1;
    uint64 term = 2;
    uint64 index = 3;
    bytes data = 4;
}

// SnapshotMetadata contains the log index and term of the last log applied to this
// Snapshot, along with the membership information of the time the last log applied.
message SnapshotMetadata {
    ConfState conf_state = 1;
    uint64 index = 2;
    uint64 term = 3;
}

message Snapshot {
    bytes data = 1;
    SnapshotMetadata metadata = 2;
}

// 这里定义的一些 MessageType 是本地消息，不来自网络，但也应该使用 Step 方法处理
enum MessageType {
    // 'MessageType_MsgHup' 是用于选举的本地消息。如果发生选举超时，
    // 节点应将 'MessageType_MsgHup' 传递给其 Step 方法并开始新的选举。
    MsgHup = 0;
    // 'MessageType_MsgBeat' 是一个本地消息，通知领导者向其追随者发送 'MessageType_MsgHeartbeat' 类型的心跳。
    MsgBeat = 1;
    // 'MessageType_MsgPropose' 是一个本地消息，提议将数据追加到领导者的日志条目中。
    MsgPropose = 2;
    // 'MessageType_MsgAppend' 包含要复制的日志条目。
    MsgAppend = 3;
    // 'MessageType_MsgAppendResponse' 是对日志复制请求（'MessageType_MsgAppend'）的响应。
    MsgAppendResponse = 4;
    // 'MessageType_MsgRequestVote' 请求选举投票。
    MsgRequestVote = 5;
    // 'MessageType_MsgRequestVoteResponse' 包含投票请求的响应。
    MsgRequestVoteResponse = 6;
    // 'MessageType_MsgSnapshot' 请求安装快照消息。
    MsgSnapshot = 7;
    // 'MessageType_MsgHeartbeat' 从领导者发送心跳到其追随者。
    MsgHeartbeat = 8;
    // 'MessageType_MsgHeartbeatResponse' 是对 'MessageType_MsgHeartbeat' 的响应。
    MsgHeartbeatResponse = 9;
    // 'MessageType_MsgTransferLeader' 请求领导者转移其领导权。
    MsgTransferLeader = 11;
    // 'MessageType_MsgTimeoutNow' 从领导者发送到领导权转移目标，让转移目标立即超时并开始新的选举。
    MsgTimeoutNow = 12;
}

message Message {
    MessageType msg_type = 1;
    uint64 to = 2;
    uint64 from = 3;
    uint64 term = 4;
    uint64 log_term = 5;
    uint64 index = 6;
    repeated Entry entries = 7;
    uint64 commit = 8;
    Snapshot snapshot = 9;
    bool reject = 10;
}

// HardState contains the state of a node need to be peristed, including the current term, commit index 
// and the vote record
message HardState {
    uint64 term = 1;
    uint64 vote = 2;
    uint64 commit = 3;
}

// ConfState contains the current membership information of the raft group
message ConfState {
    // all node id
    repeated uint64 nodes = 1;
}

enum ConfChangeType {
    AddNode    = 0;
    RemoveNode = 1;
}

// ConfChange is the data that attach on entry with EntryConfChange type
message ConfChange {
    ConfChangeType change_type = 1;
    // node will be add/remove
    uint64 node_id = 2;
    bytes context = 3;
}
